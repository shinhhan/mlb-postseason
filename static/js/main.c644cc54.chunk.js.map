{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","formattedData","allGames","scheduleUrl","state","isLoaded","_getPostseasonData","_this2","fetch","then","data","json","_parseData","catch","errorData","console","log","JSON","stringify","_sortByDate","series","setState","_this3","forEach","games","game","push","sort","a","b","Date","gameDate","broadcasts","broadcastId","map","broadcast","i","type","id","language","homeAway","name","indexOf","react_default","createElement","key","alt","className","src","_this4","dateArray","duplicateDateArray","rootUrl","year","getFullYear","date","toUTCString","split","join","includes","seriesStatus","shortDescription","result","href","teams","away","team","teamName","toLowerCase","score","home","gamePk","linescore","currentInning","_getBroadcastName","decisions","winner","nameSlug","initLastName","loser","save","logo","_renderGames","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c644cc54.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.formattedData = '';\n        this.allGames = [];\n        this.scheduleUrl = 'https://statsapi.mlb.com/api/v1/schedule/postseason/series?sportId=1&season=2018&hydrate=team,broadcasts(all),seriesStatus(useOverride=true),decisions,person,probablePitcher,linescore(matchup)';\n\n        this.state = {\n            isLoaded : false\n        };\n    }\n\n    componentWillMount() {\n        this._getPostseasonData();\n    }\n\n    /**\n     * fetches the data and passes to parseData method\n     * @return {Object} data\n     */\n    _getPostseasonData() {\n        fetch(this.scheduleUrl)\n            .then((data) => {\n                return data.json();\n            })\n            .then((data) => {\n                return this._parseData(data);\n            })\n            .catch((errorData) => {\n                console.log(JSON.stringify(errorData));\n            });\n    }\n\n    /**\n     * takes the data returned from the server and formats as needed\n     * @param  {Object} data - and object containing the data to be formatted\n     * @return {Object} formatted data\n     */\n    _parseData(data) {\n        this.formattedData = this._sortByDate(data.series);\n\n        this.setState({\n            isLoaded : true\n        })\n    }\n\n    /**\n     * sort data by date\n     * @param  {Object} data - data object to sort\n     * @return {Object} data sorted by date\n     */\n    _sortByDate(data){\n        data.forEach((series) => {\n            series.games.forEach((game) => {\n                this.allGames.push(game);\n            });\n        });\n\n        return this.allGames.sort((a, b) => {\n            a = new Date(a.gameDate);\n            b = new Date(b.gameDate);\n\n            return a > b ? 1 : a < b ? -1 : 0;\n        });\n    }\n\n    /**\n     * parse the broadcast data to get TV, en, home only\n     * @param  {Object} data - broadcast data object\n     * @return {String} render\n     */\n    _getBroadcastName(broadcasts) {\n        let broadcastName       = null,\n            broadcastId         = null;\n\n        return broadcasts.map((broadcast, i) => {\n            if (broadcast.type === 'TV' && broadcastId !== broadcast.id && broadcast.language === 'en' && broadcast.homeAway === 'home') {\n                broadcastId = broadcast.id;\n                broadcastName = broadcast.name;\n\n                if (broadcastName.indexOf('-INT') === -1) {\n                    return (\n                        <img key={i} alt=\"broadcast-icon\" className=\"broadcast-icon\" src={'https://prod-gameday.mlbstatic.com/responsive-gameday-assets/1.2.0/images/tv_station/2018/' + broadcast.id + '.svg'} />\n                    );\n                }\n            }\n            return null;\n        });\n    }\n\n    /**\n     * loop through this.formattedData to render each game details\n     * @return {String} render\n     */\n    _renderGames() {\n        let dateArray = [],\n            duplicateDateArray = [],\n            rootUrl = 'https://www.mlb.com/';\n\n        if (this.state.isLoaded) {\n            return this.formattedData.map((game, i) => {\n                let year = new Date(game.gameDate).getFullYear(),\n                    fullDate = new Date(game.gameDate).toUTCString().split(' ', 4).join(' '),\n                    date = fullDate.split(year)[0];\n\n                if (!dateArray.includes(date)) {\n                    dateArray.push(date);\n                } else {\n                    duplicateDateArray.push(date);\n                }\n\n                return (\n                    <section key={i} className=\"game\">\n                        {duplicateDateArray.includes(date) ? null :  <div className=\"game__date\">{date}</div>}\n                        <span className=\"game__summary\">{game.seriesStatus.shortDescription} - {game.seriesStatus.result}</span>\n                        <div className=\"game__details\">\n                            <div>\n                                <div className=\"game__details-teams\">\n                                    <a href={rootUrl + game.teams.away.team.teamName.toLowerCase()}>\n                                        <img alt={game.teams.away.team.teamName} className=\"game__team-logo\" src={'https://www.mlbstatic.com/team-logos/' + game.teams.away.team.id + '.svg'} />\n                                        <span className=\"game__team-name\">{game.teams.away.team.teamName}</span>\n                                        <span className=\"game__score\">{game.teams.away.score}</span>\n                                    </a>\n                                    <span className=\"at-icon\">@</span>\n                                    <a href={rootUrl + game.teams.home.team.teamName.toLowerCase()}>\n                                        <img alt={game.teams.home.team.teamName} className=\"game__team-logo\" src={'https://www.mlbstatic.com/team-logos/' + game.teams.home.team.id + '.svg'} />\n                                        <span className=\"game__team-name\">{game.teams.home.team.teamName}</span>\n                                        <span className=\"game__score\">{game.teams.home.score}</span>\n                                    </a>\n                                </div>\n                                <div className=\"game__details-broadcast\">\n                                    <a href={rootUrl + '/gameday/' + game.gamePk}>{game.linescore.currentInning > 9 ? 'F/' + game.linescore.currentInning : 'FINAL'}</a>\n                                    <span>{this._getBroadcastName(game.broadcasts)}</span>\n                                </div>\n                            </div>\n                            <div>\n                                <div className=\"game__details-players\">\n                                    <span>W: <a href={rootUrl + '/player/' + game.decisions.winner.nameSlug}>{game.decisions.winner.initLastName} </a></span>\n                                    <span>L: <a href={rootUrl + '/player/' + game.decisions.loser.nameSlug}>{game.decisions.loser.initLastName} </a></span>\n                                    {game.decisions.save ? <span>SV: <a href={rootUrl + '/player/' + game.decisions.save.nameSlug}>{game.decisions.save.initLastName}</a></span> : null}\n                                </div>\n                                <div className=\"game__details-ctas\">\n                                    <a href={rootUrl + '/gameday/' + game.gamePk + '/final/wrap'}>\n                                        <span className=\"icon-newpaper\"></span>\n                                        <span className=\"copy\">Wrap</span>\n                                    </a>\n                                    <a href={rootUrl + '/gameday/' + game.gamePk + '/final/video'}>\n                                        <span className=\"icon-video\"></span>\n                                        <span className=\"copy\">Video</span>\n                                    </a>\n                                </div>\n                            </div>\n                        </div>\n                    </section>\n                );\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"header\">\n                    <img alt=\"Major League Baseball logo\" src={logo} className=\"logo\" />\n                    <h2>MLB 2018 Postseason Schedule</h2>\n                </header>\n                {this._renderGames()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.636ec413.svg\";"],"sourceRoot":""}